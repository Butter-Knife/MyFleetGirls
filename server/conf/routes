# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Post
POST    /post/v1/basic              controllers.Post.basic
POST    /post/v1/material           controllers.Post.material
POST    /post/v1/ship               controllers.Post.ship
POST    /post/v2/ship               controllers.Post.ship2
POST    /post/v1/update_ship        controllers.Post.updateShip
POST    /post/v1/ndock              controllers.Post.ndock
POST    /post/v1/createship         controllers.Post.createShip
POST    /post/v2/createship         controllers.Post.createShip2
POST    /post/v1/createitem         controllers.Post.createItem
POST    /post/v1/kdock              controllers.Post.kdock
POST    /post/v1/deckport           controllers.Post.deckPort
POST    /post/v1/book/ship          controllers.Post.shipBook
POST    /post/v1/book/item          controllers.Post.itemBook
POST    /post/v1/mapinfo            controllers.Post.mapInfo
POST    /post/v1/slotitem           controllers.Post.slotItem
POST    /post/v1/battle_result      controllers.Post.battleResult
POST    /post/v1/map_route          controllers.Post.mapRoute
POST    /post/v1/master/ship        controllers.PostMaster.ship
POST    /post/v1/master/mission     controllers.PostMaster.mission
POST    /post/v1/master/slotitem    controllers.PostMaster.slotitem
POST    /post/v1/master/stype       controllers.PostMaster.stype
POST    /post/v1/swf/ship/:shipId   controllers.PostFile.ship(shipId: Int)
POST    /post/v1/mp3/kc/:shipId/:soundId controllers.PostFile.sound(shipId: Int, soundId: Int)

# Rest
GET     /rest/v1/search_user        controllers.Rest.searchUser(q: String)
GET     /rest/v1/search_master      controllers.Rest.searchMaster(q: String)
GET     /rest/v1/search_master_ship controllers.Rest.searchMasterShip(q: String)
GET     /rest/v1/recipe/from_ship/:shipId controllers.Rest.recipeFromShip(shipId: Int)
GET     /rest/v1/recipe/from_item/:itemId controllers.Rest.recipeFromItem(itemId: Int)
GET     /rest/v1/:userId/materials  controllers.Rest.materials(userId: Long)
GET     /rest/v1/:userId/basics     controllers.Rest.basics(userId: Long)
GET     /rest/v1/:userId/ndocks     controllers.Rest.ndocks(userId: Long)
GET     /rest/v1/:userId/kdocks     controllers.Rest.kdocks(userId: Long)
GET     /rest/v1/:userId/missions   controllers.Rest.missions(userId: Long)
GET     /rest/v1/:userId/create_ships controllers.Rest.createShips(userId: Long, limit: Int ?= 10, offset: Int ?= 0, large: Boolean ?= false)
GET     /rest/v1/:userId/create_ship_count controllers.Rest.createShipCount(userId: Long, large: Boolean ?= false)
GET     /rest/v1/:userId/create_items controllers.Rest.createItems(userId: Long, limit: Int ?= 10, offset: Int ?= 0)
GET     /rest/v1/:userId/create_item_count controllers.Rest.createItemCount(userId: Long)
GET     /rest/v1/image/ship/:shipId.jpg controllers.RestImage.ship(shipId: Int)
GET     /rest/v1/sound/ship/:shipId/:soundId.mp3 controllers.RestSound.ship(shipId: Int, soundId: Int)
HEAD    /rest/v1/image/ship/:shipId.jpg controllers.RestImage.shipHead(shipId: Int)
HEAD    /rest/v1/sound/ship/:shipId/:soundId.mp3 controllers.RestSound.shipHead(shipId: Int, soundId: Int)

# View
GET     /                           controllers.View.index
GET     /entire/about               controllers.View.about
GET     /entire/statistics          controllers.View.statistics
GET     /entire/sta/cship/:fuel/:ammo/:steel/:bauxite/:develop controllers.View.cship(fuel: Int, ammo: Int, steel: Int, bauxite: Int, develop: Int)
GET     /entire/sta/citem/:fuel/:ammo/:steel/:bauxite/:sType controllers.View.citem(fuel: Int, ammo: Int, steel: Int, bauxite: Int, sType: Int)
GET     /entire/sta/from_ship        controllers.View.fromShip(q: String ?= "")
GET     /u/:user                    controllers.UserView.name(user: String)
GET     /user/:userId               controllers.UserView.user2(userId: Long)
GET     /user/:userId/              controllers.UserView.user(userId: Long)
GET     /user/:userId/top           controllers.UserView.top(userId: Long)
GET     /user/:userId/material      controllers.UserView.material(userId: Long)
GET     /user/:userId/ship          controllers.UserView.ship(userId: Long)
GET     /user/:userId/book          controllers.UserView.book(userId: Long)
GET     /user/:userId/dock          controllers.UserView.dock(userId: Long)
GET     /user/:userId/create        controllers.UserView.create(userId: Long)
GET     /user/:userId/slotitem      controllers.UserView.slotitem(userId: Long)
GET     /user/:userId/shipslotitem/:itemId controllers.UserView.shipslotitem(userId: Long, itemId: Int)
GET     /user/:userId/aship/:shipId controllers.UserView.aship(userId: Long, shipId: Int)

# WebSocket
GET     /ws/v1/user/:userId         controllers.UserWS.info(userId: Long)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
