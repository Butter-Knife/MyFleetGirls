# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Post
POST    /post/v1/basic              controllers.Post.basic
POST    /post/v1/admiral_settings   controllers.Post.admiralSettings
POST    /post/v1/material           controllers.Post.material
POST    /post/v1/ship               controllers.Post.ship
POST    /post/v2/ship               controllers.Post.ship2
POST    /post/v1/update_ship        controllers.Post.updateShip
POST    /post/v1/ndock              controllers.Post.ndock
POST    /post/v1/createship         controllers.Post.createShip
POST    /post/v2/createship         controllers.Post.createShip2
POST    /post/v1/createitem         controllers.Post.createItem
POST    /post/v1/kdock              controllers.Post.kdock
POST    /post/v1/delete_kdock       controllers.Post.deleteKDock
POST    /post/v1/deckport           controllers.Post.deckPort
POST    /post/v1/book/ship          controllers.Post.shipBook
POST    /post/v1/book/item          controllers.Post.itemBook
POST    /post/v1/mapinfo            controllers.Post.mapInfo
POST    /post/v1/slotitem           controllers.Post.slotItem
POST    /post/v1/battle_result      controllers.Post.battleResult
POST    /post/v1/map_route          controllers.Post.mapRoute
POST    /post/v1/questlist          controllers.Post.questlist
POST    /passwd/post/v1/register_snap controllers.Post.registerSnap
POST    /passwd/post/v1/delete_snap controllers.Post.deleteSnap
POST    /passwd/post/v1/settings    controllers.Post.settings
POST    /passwd/post/v1/set_session controllers.Post.setSession
POST    /post/v1/master/ship        controllers.PostMaster.ship
POST    /post/v1/master/mission     controllers.PostMaster.mission
POST    /post/v1/master/slotitem    controllers.PostMaster.slotitem
POST    /post/v1/master/stype       controllers.PostMaster.stype
POST    /post/v1/swf/ship/:shipId   controllers.PostFile.ship(shipId: String)
POST    /post/v1/mp3/kc/:shipKey/:soundId controllers.PostFile.sound(shipKey: String, soundId: Int)

# Rest
GET     /rest/v1/search_user        controllers.Rest.searchUser(q: String)
GET     /rest/v1/search_master      controllers.Rest.searchMaster(q: String)
GET     /rest/v1/search_master_ship controllers.Rest.searchMasterShip(q: String)
GET     /rest/v1/recipe/from_ship/:shipId controllers.Rest.recipeFromShip(shipId: Int)
GET     /rest/v1/recipe/from_item/:itemId controllers.Rest.recipeFromItem(itemId: Int)
GET     /rest/v1/drop/:rank/:area/:info/:cell controllers.Rest.dropCell(area: Int, info: Int, cell: Int, rank: String)
GET     /rest/v1/drop_alpha/:rank/:area/:info/:alpha controllers.Rest.dropCellAlpha(area: Int, info: Int, alpha: String, rank: String)
GET     /rest/v1/route/:area/:info  controllers.Rest.route(area: Int, info: Int)
GET     /rest/v1/cell_info          controllers.Rest.cellInfo(area: Int ?= -1, info: Int ?= -1)
GET     /rest/v1/maps               controllers.Rest.maps()
GET     /rest/v1/drop_from_ship/:shipId  controllers.Rest.dropFromShip(shipId: Int)
GET     /rest/v1/:userId/materials  controllers.RestUser.materials(userId: Long)
GET     /rest/v1/:userId/basics     controllers.RestUser.basics(userId: Long)
GET     /rest/v1/:userId/ndocks     controllers.RestUser.ndocks(userId: Long)
GET     /rest/v1/:userId/kdocks     controllers.RestUser.kdocks(userId: Long)
GET     /rest/v1/:userId/missions   controllers.RestUser.missions(userId: Long)
GET     /rest/v1/:userId/create_ships controllers.RestUser.createShips(userId: Long, limit: Int ?= 10, offset: Int ?= 0, large: Boolean ?= false)
GET     /rest/v1/:userId/create_ship_count controllers.RestUser.createShipCount(userId: Long, large: Boolean ?= false)
GET     /rest/v1/:userId/create_items controllers.RestUser.createItems(userId: Long, limit: Int ?= 10, offset: Int ?= 0)
GET     /rest/v1/:userId/create_item_count controllers.RestUser.createItemCount(userId: Long)
GET     /rest/v1/:userId/battle_result controllers.RestUser.battleResult(userId: Long, limit: Int ?= 10, offset: Int ?= 0, boss: Boolean ?= false, drop: Boolean ?= false, rank: String ?= "SABCDE")
GET     /rest/v1/:userId/battle_result_count controllers.RestUser.battleResultCount(userId: Long, boss: Boolean ?= false, drop: Boolean ?= false, rank: String ?= "SABCDE")
GET     /rest/v1/:userId/route_log  controllers.RestUser.routeLog(userId: Long, limit: Int ?= 10, offset: Int ?= 0, area: Int ?= -1, info: Int ?= -1)
GET     /rest/v1/:userId/route_log_count controllers.RestUser.routeLogCount(userId: Long, area: Int ?= -1, info: Int ?= -1)
GET     /rest/v1/:userId/quest      controllers.RestUser.quest(userId: Long)
GET     /rest/v1/image/ship/:shipId.jpg controllers.RestImage.ship(shipId: Int)
GET     /rest/v1/sound/ship/:shipId/:soundId.mp3 controllers.RestSound.ship(shipId: Int, soundId: Int)
HEAD    /rest/v1/image/ship/:shipId.jpg controllers.RestImage.shipHead(shipId: Int)
HEAD    /rest/v1/image/ship_obf/:shipKey.jpg controllers.RestImage.shipKeyHead(shipKey: String)
HEAD    /rest/v1/sound/ship/:shipId/:soundId.mp3 controllers.RestSound.shipHead(shipId: Int, soundId: Int)
HEAD    /rest/v1/sound/ship_obf/:shipKey/:soundId.mp3 controllers.RestSound.shipKeyHead(shipKey: String, soundId: Int)

# View
GET     /                           controllers.View.index
GET     /entire/about               controllers.View.about
GET     /passwd/entire/login  controllers.View.login(init: String ?= "", back: String ?= "/")
GET     /entire/statistics          controllers.ViewSta.statistics
GET     /entire/sta/cship/:fuel/:ammo/:steel/:bauxite/:develop controllers.ViewSta.cship(fuel: Int, ammo: Int, steel: Int, bauxite: Int, develop: Int)
GET     /entire/sta/citem/:fuel/:ammo/:steel/:bauxite/:sType controllers.ViewSta.citem(fuel: Int, ammo: Int, steel: Int, bauxite: Int, sType: Int)
GET     /entire/sta/from_ship       controllers.ViewSta.fromShip()
GET     /entire/sta/drop_stage      controllers.ViewSta.dropStage()
GET     /entire/sta/drop/:area/:info controllers.ViewSta.drop(area: Int, info: Int)
GET     /entire/sta/drop_alpha/:area/:info controllers.ViewSta.dropAlpha(area: Int, info: Int)
GET     /entire/sta/route/:area/:info controllers.ViewSta.route(area: Int, info: Int)
GET     /entire/sta/route_fleet/:area/:info/:dep/:dest controllers.ViewSta.routeFleet(area: Int, info: Int, dep: Int, dest: Int)
GET     /entire/sta/ranking         controllers.ViewSta.ranking()
GET     /u/:user                    controllers.UserView.name(user: String)
GET     /user/:userId               controllers.UserView.user2(userId: Long)
GET     /user/:userId/              controllers.UserView.user(userId: Long)
GET     /user/:userId/top           controllers.UserView.top(userId: Long)
GET     /user/:userId/snapshot      controllers.UserView.snapshot(userId: Long)
GET     /passwd/user/:userId/register_snap/:deckId controllers.UserView.registerSnap(userId: Long, deckId: Int)
GET     /passwd/user/delete_snap/:snapId controllers.UserView.deleteSnap(snapId: Long)
GET     /user/:userId/material      controllers.UserView.material(userId: Long)
GET     /user/:userId/ship          controllers.UserView.ship(userId: Long)
GET     /user/:userId/ship_page/:shipId controllers.UserView.shipPage(userId: Long, shipId: Int)
GET     /passwd/user/:userId/settings      controllers.UserView.settings(userId: Long)
GET     /user/:userId/book          controllers.UserView.book(userId: Long)
GET     /user/:userId/dock          controllers.UserView.dock(userId: Long)
GET     /user/:userId/create        controllers.UserView.create(userId: Long)
GET     /user/:userId/slotitem      controllers.UserView.slotitem(userId: Long)
GET     /user/:userId/shipslotitem/:itemId controllers.UserView.shipslotitem(userId: Long, itemId: Int)
GET     /user/:userId/aship/:shipId controllers.UserView.aship(userId: Long, shipId: Int)
GET     /user/:userId/snap_aship/:shipId controllers.UserView.snapAship(userId: Long, shipId: Int)
GET     /user/:userId/fleet/:deckId controllers.UserView.fleet(userId: Long, deckId: Int)
GET     /user/:userId/naval_battle  controllers.UserView.navalBattle(userId: Long)
GET     /user/:userId/route_log     controllers.UserView.routeLog(userId: Long)
GET     /user/:userId/quest         controllers.UserView.quest(userId: Long)
GET     /user/:userId/statistics    controllers.UserView.statistics(userId: Long)

# WebSocket
GET     /ws/v1/user/:userId         controllers.UserWS.info(userId: Long)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
